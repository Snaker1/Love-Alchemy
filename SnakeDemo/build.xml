<?xml version="1.0"?>
<project name="Rapid" default="build" basedir=".">

  <property environment="env"/>
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>

  <fail>
    <condition>
      <not>
        <isset property="env.FLEX_HOME" />
      </not>
    </condition>
    Error!
    You need to set FLEX_HOME environment variable (path to Flex SDK)
    export FLEX_HOME=/Applications/Adobe\ Flex\ Builder\ 3/sdks/3.2.0
  </fail>

  <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

  <property name="assets.class.name" value="LuaAssets"/>
  <property name="assets.package.name" value=""/>

  <!-- dirs -->
  <property name="build.dir" location="build/"/>
  <property name="release.build.dir" location="${build.dir}/release/"/>
  <property name="debug.build.dir" location="${build.dir}/debug/"/>
  <property name="src.dir" location="src/"/>
  <property name="assets.dir" location="assets/"/>
  <property name="lib.dir" location="libs/"/>
  <property name="alchemy.release.dir" location="../../alchemy/lua-alchemy/build/release"/>
  <property name="alchemy.debug.dir" location="../../alchemy/lua-alchemy/build/debug"/>
  <property name="flex.config.xml" location="${FLEX_HOME}/frameworks/flex-config.xml"/>
  <property name="build.tools.dir" location="../../build"/>
  <property name="assets.class.dir" location="${src.dir}/${assets.package.name}/"/>
  <property name="assets.class.as" location="${assets.class.dir}/${assets.class.name}.as"/>

  <!-- files -->
  <property name="main.application" location="${src.dir}/Rapid.mxml"/>
  <property name="output.swf.name" value="Rapid"/>
  <property name="main.application.release.out" location="${release.build.dir}/${output.swf.name}.swf"/>
  <property name="main.application.debug.out" location="${debug.build.dir}/${output.swf.name}.swf"/>

  <!-- wrapper -->
  <property name="template" value="express-installation" />
  <property name="output.html.name" value="${output.swf.name}.html"/>
  <property name="output.debug.html" location="${debug.build.dir}/${output.html.name}"/>
  <property name="output.release.html" location="${release.build.dir}/${output.html.name}"/>

  <property name="swf.width" value="100%"/>
  <property name="swf.height" value="100%"/>
  <property name="swf.debug.title" value="Rapid App"/>
  <property name="swf.release.title" value="Rapid App"/>
  <property name="swf.version.major" value="10"/>
  <property name="swf.version.minor" value="0"/>
  <property name="swf.version.revision" value="0"/>
  <property name="swf.application" value="${output.swf.name}"/>
  <property name="swf.swf" value="${output.swf.name}"/>
  <property name="swf.bgcolor" value="#FFFFFF"/>

  <description>
    Rapid Development Program for lua-alchemy
  </description>

  <!-- =================================
        target: build
       ================================= -->
  <target name="build"
    depends="clear, init, compile.release, compile.debug, make.release.wrapper, make.debug.wrapper"
    description="--> Rapid application">
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: generate.assets
       - - - - - - - - - - - - - - - - - -->
  <target name="generate.assets">
    <exec executable="bash" dir="${basedir}"
      input="${build.tools.dir}/LuaAssets.as.template"
      output="${assets.class.as}">
      <arg value="${build.tools.dir}/gen_assets.sh"/>
      <arg path="${assets.dir}"/>
      <arg value="${assets.class.name}"/>
      <arg value="${assets.dir}"/>
      <arg value="${assets.package.name}"/>
    </exec>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: make.release.wrapper
         - - - - - - - - - - - - - - - - - -->
  <target name="make.release.wrapper">
    <html-wrapper
      template="${template}"
      history="true"
      width="${swf.width}"
      height="${swf.height}"
      title="${swf.release.title}"
      version-major="${swf.version.major}"
      version-minor="${swf.version.minor}"
      version-revision="${swf.version.revision}"
      application="${swf.application}"
      swf="${swf.swf}"
      bgcolor="${swf.bgcolor}"
      output="${release.build.dir}" />
    <move file="${release.build.dir}/index.html" tofile="${output.release.html}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: make.debug.wrapper
         - - - - - - - - - - - - - - - - - -->
  <target name="make.debug.wrapper">
    <html-wrapper
      template="${template}"
      history="true"
      width="${swf.width}"
      height="${swf.height}"
      title="${swf.debug.title}"
      version-major="${swf.version.major}"
      version-minor="${swf.version.minor}"
      version-revision="${swf.version.revision}"
      application="${swf.application}"
      swf="${swf.swf}"
      bgcolor="${swf.bgcolor}"
      output="${debug.build.dir}" />
    <move file="${debug.build.dir}/index.html" tofile="${output.debug.html}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: compile.release
       - - - - - - - - - - - - - - - - - -->
  <target name="compile.release" depends="generate.assets">
    <mxmlc file="${main.application}" output="${main.application.release.out}"
      target-player="10.0.0">
      <load-config filename="${flex.config.xml}" />
      <compiler.include-libraries dir="${alchemy.release.dir}" append="true">
        <include name="lua-alchemy.swc" />
      </compiler.include-libraries>
   </mxmlc>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: compile.debug
       - - - - - - - - - - - - - - - - - -->
  <target name="compile.debug" depends="generate.assets">
    <mxmlc debug="true" file="${main.application}" output="${main.application.debug.out}"
      target-player="10.0.0">
      <load-config filename="${flex.config.xml}" />
      <compiler.include-libraries dir="${alchemy.debug.dir}" append="true">
        <include name="lua-alchemy.swc" />
      </compiler.include-libraries>
    </mxmlc>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: clear
         - - - - - - - - - - - - - - - - - -->
  <target name="clear">
    <delete failonerror="false">
      <fileset dir="${build.dir}" includes="**/*.*" />
      <fileset dir="${assets.class.dir}" includes="${assets.class.as}" />
    </delete>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: init
         - - - - - - - - - - - - - - - - - -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${release.build.dir}"/>
    <mkdir dir="${debug.build.dir}"/>
    <mkdir dir="${assets.class.dir}"/>
  </target>
</project>
